class Node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.val=key

root=Node('Indrajeet')
root.left=Node('Surya')
root.right=Node('ChandraPrakash')
root.right.left=Node('Akarsh')
root.right.right=Node('Nancy')


def preorder(root):
    if root:
        print(root.val,end=' ')
        preorder(root.left)
        preorder(root.right)
# preorder(root)

# InOrder with the help of the Stack
def inOrderWithStack(root):
    current=root
    stack=[]
    done=0
    while True:
        if current is not None:
            stack.append(current)
            current=current.left
        elif stack:
            current=stack.pop()
            print(current.val,end=' ')
            current=current.right
        else:
            break
    print()
# Height of the node is
def height(node):
    if node is None:
        return 0
    else:
        lheight=height(node.left)
        rheight=height(node.right)
        if lheight>rheight:
            return lheight+1
        else:
            return rheight+1

def printLevelOrer(root):
    h=height(root)
    for i in range(1,h+1):
        printGivenLevelOrder(root,i)

def printGivenLevelOrder(root,level):
    if root is None:
        return
    if level==1:
        print(root.val,end=" ")
    elif level>1:
        printGivenLevelOrder(root.left,level-1)
        printGivenLevelOrder(root.right,level-1)


# inOrderWithStack(root)
# printLevelOrer(root)

# Print Level Order with the help of Queue
def printLevelOrderWithTheQueue(root):
    if root is None:
        return
    queue=[]
    queue.append(root)
    while len(queue)>0:
        print(queue[0].val,end=' ')
        node=queue.pop(0)
        if node.left is not None:
            queue.append(node.left)
        if node.right is not None:
            queue.append(node.right)

printLevelOrderWithTheQueue(root)
